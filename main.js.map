{"version":3,"file":"main.js","mappings":"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","sources":["webpack://js-basic-hw-7/webpack/bootstrap","webpack://js-basic-hw-7/./src/scripts/services.js","webpack://js-basic-hw-7/webpack/runtime/global","webpack://js-basic-hw-7/webpack/runtime/publicPath","webpack://js-basic-hw-7/./src/scripts/localStorageController.js","webpack://js-basic-hw-7/./src/scripts/pageHandler.js","webpack://js-basic-hw-7/./src/scripts/init.js","webpack://js-basic-hw-7/./src/index.js"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","const DEFAULT_CITY = \"Moscow\";\nconst API_WEATHER = \"c2e143f433c82cecf1f594126af9bfd5\";\n\nasync function getCityName(response) {\n  if (response.status !== 200) {\n    return DEFAULT_CITY;\n  }\n\n  const responseObj = await response.json();\n  return responseObj.geoplugin_city || DEFAULT_CITY;\n}\n\nexport async function getCurrentCity() {\n  const city = await fetch(\"http://www.geoplugin.net/json.gp\").then(\n    getCityName,\n    () => DEFAULT_CITY\n  );\n  return city;\n}\n\nexport async function getWeatherInfo(cityName) {\n  const url =\n    \"https://api.openweathermap.org/data/2.5/weather?\" +\n    `appid=${API_WEATHER}&q=${cityName}&units=metric`;\n\n  try {\n    const response = await fetch(url);\n    if (response.status !== 200) {\n      throw new Error(`Status code = ${response.status}`);\n    }\n    return await response.json();\n  } catch {\n    return null;\n  }\n}\n\nexport async function getSrcMap({\n  lat,\n  lon,\n  size: { height = 450, width = 450 },\n  z = 12,\n}) {\n  const url =\n    \"https://static-maps.yandex.ru/1.x/?\" +\n    `ll=${lon},${lat}&z=${z}&size=${width},${height}&l=map`;\n\n  return fetch(url).then(\n    (response) => {\n      if (response.status === 200) {\n        return url;\n      }\n      return null;\n    },\n    () => null\n  );\n}\n","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","var scriptUrl;\nif (__webpack_require__.g.importScripts) scriptUrl = __webpack_require__.g.location + \"\";\nvar document = __webpack_require__.g.document;\nif (!scriptUrl && document) {\n\tif (document.currentScript)\n\t\tscriptUrl = document.currentScript.src\n\tif (!scriptUrl) {\n\t\tvar scripts = document.getElementsByTagName(\"script\");\n\t\tif(scripts.length) scriptUrl = scripts[scripts.length - 1].src\n\t}\n}\n// When supporting browsers where an automatic publicPath is not supported you must specify an output.publicPath manually via configuration\n// or pass an empty string (\"\") and set the __webpack_public_path__ variable from your code to use your own logic.\nif (!scriptUrl) throw new Error(\"Automatic publicPath is not supported in this browser\");\nscriptUrl = scriptUrl.replace(/#.*$/, \"\").replace(/\\?.*$/, \"\").replace(/\\/[^\\/]+$/, \"/\");\n__webpack_require__.p = scriptUrl;","const STORAGE_KEY = \"list of cities\";\n\nexport function getHistoryList() {\n  let historyList = JSON.parse(localStorage.getItem(STORAGE_KEY));\n  if (historyList === null) {\n    historyList = [];\n  }\n\n  return historyList;\n}\n\nexport function addCityToStorage(cityName) {\n  const historyList = getHistoryList();\n  const cityInd = historyList.indexOf(cityName);\n  if (cityInd !== -1) {\n    historyList.splice(cityInd, 1);\n  }\n\n  historyList.unshift(cityName);\n  localStorage.setItem(STORAGE_KEY, JSON.stringify(historyList.slice(0, 10)));\n}\n","import { getSrcMap, getWeatherInfo } from \"./services\";\nimport { addCityToStorage } from \"./localStorageController\";\nimport unknownLocationImg from \"../images/unknown_location.png\";\n\nexport function displayHistoryList(parentElem, stringArray) {\n  for (let i = stringArray.length - 1; i >= 0; i--) {\n    addCityToHistoryList(stringArray[i], parentElem);\n  }\n}\n\nasync function updateMap(lat, lon) {\n  const map = document.querySelector(\".map\");\n  const src = await getSrcMap({\n    lat,\n    lon,\n    size: { width: map.width, height: map.height },\n  });\n  document.querySelector(\".map\").src = src ?? unknownLocationImg;\n}\n\nfunction clickCityName(event) {\n  updateData(event.target.innerText);\n}\n\nfunction deleteCityFromHistory(cityName) {\n  const list = document.querySelectorAll(\".history__city\");\n  for (let i = 0; i < list.length; i++) {\n    if (list[i].innerText === cityName) {\n      list[i].remove();\n      break;\n    }\n  }\n}\n\nfunction isElemContainsString(elem, string) {\n  return [].some.call(elem.childNodes, (item) =>\n    item.innerText.includes(string)\n  );\n}\n\nfunction addCityToHistoryList(cityName, parentElem) {\n  const cityElem = document.createElement(\"li\");\n  cityElem.innerText = cityName;\n  cityElem.classList.add(\"history__city\");\n  cityElem.addEventListener(\"click\", clickCityName);\n\n  if (isElemContainsString(parentElem, cityName)) {\n    deleteCityFromHistory(cityName);\n  }\n\n  parentElem.prepend(cityElem);\n  addCityToStorage(cityName);\n}\n\nexport async function updateData(inputCity) {\n  const weatherInfo = await getWeatherInfo(inputCity);\n  if (weatherInfo === null) {\n    alert(`Failed to get weather for ${inputCity}`);\n    return;\n  }\n\n  const {\n    coord: { lon, lat },\n    weather: [{ icon }],\n    main: { temp: temperature },\n    name: cityName,\n  } = weatherInfo;\n\n  document.querySelector(\".forecast__city\").innerText = cityName;\n  document.querySelector(\".forecast__temperature\").innerText = temperature;\n  document.querySelector(\n    \".forecast__image\"\n  ).src = `http://openweathermap.org/img/wn/${icon}@2x.png`;\n  addCityToHistoryList(cityName, document.querySelector(\".history__list\"));\n  updateMap(lat, lon);\n}\n\nexport function clickHistoryButton() {\n  const inputCity = document.querySelector(\".history__input-city\").value;\n  updateData(inputCity);\n}\n","import {\n  displayHistoryList,\n  updateData,\n  clickHistoryButton,\n} from \"./pageHandler\";\nimport { getCurrentCity } from \"./services\";\nimport { getHistoryList } from \"./localStorageController\";\n\nexport async function loadStarterPage() {\n  const cityName = await getCurrentCity();\n  const historyListElem = document.querySelector(\".history__list\");\n\n  document.querySelector(\".forecast__city\").innerText = cityName;\n  displayHistoryList(historyListElem, getHistoryList());\n  updateData(cityName);\n\n  const button = document.querySelector(\".history__button\");\n  button.addEventListener(\"click\", clickHistoryButton);\n  document\n    .querySelector(\".history__input-city\")\n    .addEventListener(\"keyup\", (e) => {\n      if (e.target.value === \"\") {\n        button.disabled = true;\n      } else {\n        button.disabled = false;\n        if (e.key === \"Enter\") {\n          button.click();\n        }\n      }\n    });\n}\n","import \"normalize.css\";\nimport \"./styles/index.css\";\nimport { loadStarterPage } from \"./scripts/init\";\n\nloadStarterPage();\n"],"names":["__webpack_require__","g","globalThis","this","Function","e","window","scriptUrl","importScripts","location","document","currentScript","src","scripts","getElementsByTagName","length","Error","replace","p","DEFAULT_CITY","API_WEATHER","getCityName","response","status","json","responseObj","geoplugin_city","getCurrentCity","fetch","then","city","getWeatherInfo","cityName","url","getSrcMap","lat","lon","size","height","width","z","STORAGE_KEY","getHistoryList","historyList","JSON","parse","localStorage","getItem","i","displayHistoryList","parentElem","stringArray","addCityToHistoryList","updateMap","map","querySelector","unknownLocationImg","clickCityName","event","updateData","target","innerText","elem","string","cityElem","createElement","classList","add","addEventListener","some","call","childNodes","item","includes","list","querySelectorAll","remove","deleteCityFromHistory","prepend","cityInd","indexOf","splice","unshift","setItem","stringify","slice","addCityToStorage","inputCity","weatherInfo","alert","coord","weather","icon","temperature","main","temp","name","clickHistoryButton","value","historyListElem","button","disabled","key","click","loadStarterPage"],"sourceRoot":""}