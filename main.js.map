{"version":3,"file":"main.js","mappings":"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","sources":["webpack://weather-forecast/webpack/bootstrap","webpack://weather-forecast/./src/scripts/services.js","webpack://weather-forecast/webpack/runtime/global","webpack://weather-forecast/webpack/runtime/publicPath","webpack://weather-forecast/./src/scripts/localStorageController.js","webpack://weather-forecast/./src/scripts/pageHandler.js","webpack://weather-forecast/./src/scripts/init.js","webpack://weather-forecast/./src/index.js"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","const DEFAULT_CITY = \"Moscow\";\nconst API_WEATHER = \"c2e143f433c82cecf1f594126af9bfd5\";\n\nasync function getCityName(response) {\n  if (response.status !== 200) {\n    return DEFAULT_CITY;\n  }\n\n  const responseObj = await response.json();\n  return responseObj.geoplugin_city || DEFAULT_CITY;\n}\n\nexport async function getCurrentCity() {\n  const city = await fetch(\"http://www.geoplugin.net/json.gp\").then(\n    getCityName,\n    () => DEFAULT_CITY\n  );\n  return city;\n}\n\nexport async function getWeatherInfo(cityName) {\n  const url =\n    \"https://api.openweathermap.org/data/2.5/weather?\" +\n    `appid=${API_WEATHER}&q=${cityName}&units=metric`;\n\n  try {\n    const response = await fetch(url);\n    if (response.status !== 200) {\n      throw new Error(`Status code = ${response.status}`);\n    }\n    return await response.json();\n  } catch {\n    return null;\n  }\n}\n\nexport async function getSrcMap({\n  lat,\n  lon,\n  size: { height = 450, width = 450 },\n  z = 12,\n}) {\n  const url =\n    \"https://static-maps.yandex.ru/1.x/?\" +\n    `ll=${lon},${lat}&z=${z}&size=${width},${height}&l=map`;\n\n  return fetch(url).then(\n    (response) => {\n      if (response.status === 200) {\n        return url;\n      }\n      return null;\n    },\n    () => null\n  );\n}\n","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","var scriptUrl;\nif (__webpack_require__.g.importScripts) scriptUrl = __webpack_require__.g.location + \"\";\nvar document = __webpack_require__.g.document;\nif (!scriptUrl && document) {\n\tif (document.currentScript)\n\t\tscriptUrl = document.currentScript.src\n\tif (!scriptUrl) {\n\t\tvar scripts = document.getElementsByTagName(\"script\");\n\t\tif(scripts.length) scriptUrl = scripts[scripts.length - 1].src\n\t}\n}\n// When supporting browsers where an automatic publicPath is not supported you must specify an output.publicPath manually via configuration\n// or pass an empty string (\"\") and set the __webpack_public_path__ variable from your code to use your own logic.\nif (!scriptUrl) throw new Error(\"Automatic publicPath is not supported in this browser\");\nscriptUrl = scriptUrl.replace(/#.*$/, \"\").replace(/\\?.*$/, \"\").replace(/\\/[^\\/]+$/, \"/\");\n__webpack_require__.p = scriptUrl;","const STORAGE_KEY = \"list of cities\";\n\nexport function getHistoryList() {\n  let historyList = JSON.parse(localStorage.getItem(STORAGE_KEY));\n  if (historyList === null) {\n    historyList = [];\n  }\n\n  return historyList;\n}\n\nexport function addCityToStorage(cityName) {\n  const historyList = getHistoryList();\n  const cityInd = historyList.indexOf(cityName);\n  if (cityInd !== -1) {\n    historyList.splice(cityInd, 1);\n  }\n\n  historyList.unshift(cityName);\n  localStorage.setItem(STORAGE_KEY, JSON.stringify(historyList.slice(0, 10)));\n}\n","import { getSrcMap, getWeatherInfo } from \"./services\";\nimport { addCityToStorage } from \"./localStorageController\";\nimport unknownLocationImg from \"../images/unknown_location.png\";\n\nasync function updateMap(lat, lon) {\n  const map = document.querySelector(\".map\");\n  const src = await getSrcMap({\n    lat,\n    lon,\n    size: { width: map.width, height: map.height },\n  });\n  document.querySelector(\".map\").src = src ?? unknownLocationImg;\n}\n\nfunction deleteCityFromHistory(cityName) {\n  const list = document.querySelectorAll(\".history__city\");\n  for (let i = 0; i < list.length; i++) {\n    if (list[i].innerText === cityName) {\n      list[i].remove();\n      break;\n    }\n  }\n}\n\nfunction isElemContainsString(elem, string) {\n  return [].some.call(elem.childNodes, (item) =>\n    item.innerText.includes(string)\n  );\n}\n\nfunction addCityToHistoryList(cityName, parentElem) {\n  const cityElem = document.createElement(\"li\");\n  cityElem.innerText = cityName;\n  cityElem.classList.add(\"history__city\");\n  cityElem.addEventListener(\"click\", clickCityName);\n\n  if (isElemContainsString(parentElem, cityName)) {\n    deleteCityFromHistory(cityName);\n  }\n\n  parentElem.prepend(cityElem);\n  addCityToStorage(cityName);\n}\n\nexport function displayHistoryList(parentElem, stringArray) {\n  for (let i = stringArray.length - 1; i >= 0; i--) {\n    addCityToHistoryList(stringArray[i], parentElem);\n  }\n}\n\nexport async function updateData(inputCity) {\n  const weatherInfo = await getWeatherInfo(inputCity);\n  if (weatherInfo === null) {\n    alert(`Failed to get weather for ${inputCity}`);\n    return;\n  }\n\n  const {\n    coord: { lon, lat },\n    weather: [{ icon }],\n    main: { temp: temperature },\n    name: cityName,\n  } = weatherInfo;\n\n  document.querySelector(\".forecast__city\").innerText = cityName;\n  document.querySelector(\".forecast__temperature\").innerText = temperature;\n  document.querySelector(\n    \".forecast__image\"\n  ).src = `http://openweathermap.org/img/wn/${icon}@2x.png`;\n  addCityToHistoryList(cityName, document.querySelector(\".history__list\"));\n  updateMap(lat, lon);\n}\n\nfunction clickCityName(event) {\n  updateData(event.target.innerText);\n}\n\nexport function clickHistoryButton() {\n  const inputCity = document.querySelector(\".history__input-city\").value;\n  updateData(inputCity);\n}\n","import {\n  displayHistoryList,\n  updateData,\n  clickHistoryButton,\n} from \"./pageHandler\";\nimport { getCurrentCity } from \"./services\";\nimport { getHistoryList } from \"./localStorageController\";\n\nexport async function loadStarterPage() {\n  const cityName = await getCurrentCity();\n  const historyListElem = document.querySelector(\".history__list\");\n\n  document.querySelector(\".forecast__city\").innerText = cityName;\n  displayHistoryList(historyListElem, getHistoryList());\n  updateData(cityName);\n\n  const button = document.querySelector(\".history__button\");\n  button.addEventListener(\"click\", clickHistoryButton);\n  document\n    .querySelector(\".history__input-city\")\n    .addEventListener(\"keyup\", (e) => {\n      if (e.target.value === \"\") {\n        button.disabled = true;\n      } else {\n        button.disabled = false;\n        if (e.key === \"Enter\") {\n          button.click();\n        }\n      }\n    });\n}\n","import \"normalize.css\";\nimport \"./styles/index.css\";\nimport { loadStarterPage } from \"./scripts/init\";\n\nloadStarterPage();\n"],"names":["__webpack_require__","g","globalThis","this","Function","e","window","scriptUrl","importScripts","location","document","currentScript","src","scripts","getElementsByTagName","length","Error","replace","p","DEFAULT_CITY","API_WEATHER","getCityName","response","status","json","responseObj","geoplugin_city","getCurrentCity","fetch","then","city","getWeatherInfo","cityName","url","getSrcMap","lat","lon","size","height","width","z","STORAGE_KEY","getHistoryList","historyList","JSON","parse","localStorage","getItem","i","updateMap","map","querySelector","unknownLocationImg","addCityToHistoryList","parentElem","elem","string","cityElem","createElement","innerText","classList","add","addEventListener","clickCityName","some","call","childNodes","item","includes","list","querySelectorAll","remove","deleteCityFromHistory","prepend","cityInd","indexOf","splice","unshift","setItem","stringify","slice","addCityToStorage","displayHistoryList","stringArray","updateData","inputCity","weatherInfo","alert","coord","weather","icon","temperature","main","temp","name","event","target","clickHistoryButton","value","historyListElem","button","disabled","key","click","loadStarterPage"],"sourceRoot":""}